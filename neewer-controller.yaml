# These substitutions allow the end user to override certain values
substitutions:
  name: "neewer-controller"

esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO
  #  logs:
  #    esp32_ble: DEBUG
  #    json: DEBUG

# Enable Home Assistant API
api:

ota:

web_server:
  port: 80

improv_serial:
  next_url: http://{{ip_address}}

wifi:
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    password: "neewer-wifi-controller"

captive_portal:

external_components:
  - source: github://DanielBaulig/litiu-esphome-components
    components: [ neewerlight ]

globals:
  - id: paired_mac_address_store
    type: ESPPreferenceObject
  - id: closest_rssi
    type: int8_t
    initial_value: "-127"
  - id: closest_address
    type: std::string
    initial_value: ""

dashboard_import:
  package_import_url: github://DanielBaulig/neewer-controller/neewer-controller.yaml
  import_full_config: false

esphome:
  name: "${name}"
  name_add_mac_suffix: true

  project:
    name: DanielBaulig.neewer-controller
    version: "0.2.3"

  on_boot:
    then:
      - lambda: |-
          // ble tracker will start off scanning
          id(scanning).publish_state(true);

          // Get previously paired mac address
          id(paired_mac_address_store) = global_preferences->make_preference<uint64_t>(12345678);
          uint64_t mac_address_raw = 0;
          if (!id(paired_mac_address_store).load(&mac_address_raw) || !mac_address_raw) {
            return;
          }

          // Reconnect to previously paired mac address
          auto mac_address_s = str_snprintf("%02X:%02X:%02X:%02X:%02X:%02X", 17, (uint8_t) (mac_address_raw >> 40) & 0xff,
              (uint8_t) (mac_address_raw >> 32) & 0xff, (uint8_t) (mac_address_raw >> 24) & 0xff,
              (uint8_t) (mac_address_raw >> 16) & 0xff, (uint8_t) (mac_address_raw >> 8) & 0xff,
              (uint8_t) (mac_address_raw >> 0) & 0xff);

          auto select = id(mac_select);
          std::vector<std::string> options = {"None", mac_address_s};
          select->traits.set_options(options);
          select->publish_state(mac_address_s);

esp32_ble_tracker:
  id: ble_tracker
  on_scan_end:
    then:
      - lambda: |-
          id(scanning).publish_state(false);
  on_ble_advertise:
    then:
      - lambda: |-
            auto device = x;

            if (device.get_name().rfind("NEEWER-", 0) != 0) {
              ESP_LOGV(
                "neewer",
                "Saw bluetooth device identifying as \"%s\" (MAC: %s, RSSI: %d)",
                device.get_name().c_str(),
                device.address_str().c_str(),
                device.get_rssi()
              );
              return;
            }

            ESP_LOGD(
              "neewer",
              "Found bluetooth device identifying as neewer device \"%s\" (MAC: %s, RSSI: %d)",
              device.get_name().c_str(),
              device.address_str().c_str(),
              device.get_rssi()
            );
            std::string s = device.address_str();
            auto select = id(mac_select);

            if (select->has_option(s)) {
              return;
            }

            if (device.get_name() != "NEEWER-RGB660") {
              ESP_LOGW(
                "neewer",
                "Neewer device \"%s\" does not identify as NEEWER-RGB660, is not officially supported and may not work as expected",
                device.get_name().c_str()
              );
            }

            ESP_LOGI(
              "neewer",
              "Adding new neewer device \"%s\" (MAC: %s, RSSI: %d) to address list",
              device.get_name().c_str(),
              device.address_str().c_str(),
              device.get_rssi()
            );
            auto v = select->traits.get_options();
            v.push_back(device.address_str());
            select->traits.set_options(v);

            if (device.get_rssi() > id(closest_rssi)) {
              id(closest_address) = device.address_str();
              id(closest_rssi) = device.get_rssi();
            }


select:
  - platform: template
    optimistic: true
    disabled_by_default: true
    options:
      - None
    id: mac_select
    entity_category: "config"
    name: Paired device

    on_value:
      then:
        - lambda: |-
            auto ble_client = id(nw660_ble_client);
            std::string address_s = x;
            uint64_t address_raw = 0;

            if (address_s != "None") {
              address_s.erase(std::remove(address_s.begin(), address_s.end(), ':'), address_s.end());
              optional<uint64_t> address_parsed = parse_hex<uint64_t>(address_s);
              ESP_LOGD("neewer", "Changing BLE client address: %s", x.c_str());
              if (!address_parsed.has_value()) {
                ESP_LOGW("neewer", "Invalid BLE client address: %s", x.c_str());
                return;
              }
              address_raw = address_parsed.value();
            }

            if (ble_client->connected()) {
              ble_client->disconnect();
            }
            ble_client->set_address(address_raw);
            id(paired_mac_address_store).save(&address_raw);
            if (address_raw) {
              ESP_LOGI("neewer", "Connecting to BLE client", x.c_str());
            }

interval:
  - interval: 5s
    then:
      - lambda: |-
          auto ble_client = id(nw660_ble_client);
          // Attempt to reconnect to paired light if we have lost connection
          if (!ble_client->connected() && id(paired).state && !id(scanning).state) {
            id(ble_tracker)->start_scan();
            id(scanning).publish_state(true);
          }

ble_client:
  - mac_address: 00:00:00:00:00:00
    id: nw660_ble_client
    on_connect:
      then:
        - lambda: |-
            id(ble_tracker)->stop_scan();

binary_sensor:
  - platform: template
    entity_category: "diagnostic"
    id: paired
    name: Paired
    lambda: |-
        return id(mac_select).state != "None";
  - platform: template
    entity_category: "diagnostic"
    name: Connected
    lambda: |-
        return id(nw660_ble_client).connected();
  - platform: template
    entity_category: "diagnostic"
    name: Scanning
    id: scanning
    disabled_by_default: true

button:
  - platform: template
    entity_category: "config"
    name: Reset
    disabled_by_default: true
    on_press:
        then:
          - lambda: |-
              ESP_LOGI("neewer", "Resetting paired device and restarting...");
              id(mac_select).publish_state("None");
              App.safe_reboot();
  - platform: template
    entity_category: "config"
    name: Pair with closest device
    id: pair_closest
    on_press:
      then:
        - lambda: |-
            id(mac_select).publish_state(id(closest_address));
  - platform: template
    disabled_by_default: true
    entity_category: "config"
    name: Rescan devices
    on_press:
      then:
        - lambda: |-
            auto select = id(mac_select);
            auto mac_address = select->state;
            std::vector<std::string> options = {"None"};
            if (mac_address != "None") {
              options.push_back(mac_address);
            }
            select->traits.set_options(options);
            id(ble_tracker)->start_scan();
            id(scanning).publish_state(true);

light:
  - platform: neewerlight
    name: "Neewer 660 RGB Light"
    ble_client_id: nw660_ble_client
    gamma_correct: 1.0
    default_transition_length: 0s
